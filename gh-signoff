#!/usr/bin/env bash
set -euo pipefail

DEBUG=${SIGNOFF_DEBUG:-}
VERSION="0.1.0"

trap 'fail "Unexpected error on line $LINENO ($?)"' ERR

if ! command -v git >/dev/null 2>&1; then
  echo "Error: git command not found" >&2
  exit 1
fi

if ! command -v gh >/dev/null 2>&1; then
  echo "Error: gh command not found. Please install GitHub CLI: https://cli.github.com" >&2
  exit 1
fi

debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "Debug: $*" >&2
  fi
}

fail() {
  echo "Error: $*" >&2
  exit 1
}

is_clean() {
  local git_cmd=$(command -v git)

  if [[ -n "$($git_cmd status --porcelain)" ]]; then
    debug "found uncommitted changes"
    return 1
  fi

  if ! $git_cmd rev-parse --abbrev-ref @{push} >/dev/null 2>&1; then
    debug "no tracking branch found"
    fail "current branch is not tracking a remote branch"
  fi

  if [[ -n "$($git_cmd log @{push}..)" ]]; then
    debug "found unpushed changes"
    return 1
  fi

  return 0
}

cmd_create() {
  local force=false
  local contexts=()

  # Process arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f)
        force=true
        shift
        ;;

      -*)
        fail "unknown option: $1"
        ;;
      *)
        # Non-option argument is treated as context
        contexts+=("$1")
        shift
        ;;
    esac
  done

  if ! $force && ! is_clean; then
    fail "repository has uncommitted or unpushed changes"
  fi

  local user
  user=$(git config user.name) || fail "failed to get git user name"
  [[ -z "$user" ]] && fail "git user.name is not set"

  local sha
  sha=$(git rev-parse HEAD) || fail "failed to get current commit"

  # If no contexts specified, use default
  if [ ${#contexts[@]} -eq 0 ]; then
    contexts=("")
  fi

  local success=true
  local success_messages=()

  # Process each context
  for context in "${contexts[@]}"; do
    local context_name="signoff"
    if [[ -n "$context" ]]; then
      context_name="signoff/${context}"
    fi

    debug "creating status for commit ${sha} by ${user} with context ${context_name}"

    if gh api \
      --method POST \
      "repos/:owner/:repo/statuses/${sha}" \
      -f state=success \
      -f context="${context_name}" \
      -f "description=${user} signed off" >/dev/null; then
      
      # Build success message
      if [[ -z "$context" ]]; then
        success_messages+=("✓ Signed off on ${sha}")
      else
        success_messages+=("✓ Signed off on ${sha} for ${context}")
      fi
    else
      success=false
      if [[ -z "$context" ]]; then
        echo "✗ Failed to sign off on ${sha}" >&2
      else
        echo "✗ Failed to sign off on ${sha} for ${context}" >&2
      fi
    fi
  done

  # Show success messages if everything passed
  if $success; then
    printf "%s\n" "${success_messages[@]}"
  else
    exit 1
  fi
}

cmd_install() {
  local branch=""
  local contexts=()
  # All arguments except --branch are contexts
  
  # Process arguments with proper option handling
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --branch)
        if [[ -z "$2" || "$2" == -* ]]; then
          fail "option --branch requires an argument"
        fi
        branch="$2"
        shift 2
        ;;
      -*)
        fail "unknown option: $1"
        ;;
      *)
        # All positional arguments are contexts
        contexts+=("$1")
        shift
        ;;
    esac
  done

  # If branch not specified, use default branch
  if [[ -z "$branch" ]]; then
    branch=$(gh api repos/:owner/:repo --jq .default_branch) ||
      fail "failed to get default branch"
  fi
  [[ -z "$branch" ]] && fail "branch name cannot be empty"

  # Default to standard signoff if no contexts specified
  if [ ${#contexts[@]} -eq 0 ]; then
    contexts=("")
  fi

  # Build API fields for all contexts
  local api_fields=()
  api_fields+=("--field" "required_status_checks[strict]=false")
  api_fields+=("--field" "enforce_admins=null")
  api_fields+=("--field" "required_pull_request_reviews=null")
  api_fields+=("--field" "restrictions=null")
  
  for context in "${contexts[@]}"; do
    local context_name="signoff"
    if [[ -n "$context" ]]; then
      context_name="signoff/${context}"
    fi
    api_fields+=("--field" "required_status_checks[contexts][]=${context_name}")
  done

  debug "installing protection on branch: ${branch} with ${#contexts[@]} contexts"

  gh api "/repos/:owner/:repo/branches/${branch}/protection" \
    --method PUT \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "${api_fields[@]}" >/dev/null || fail "failed to set branch protection"

  # Output success messages
  if [ ${#contexts[@]} -eq 1 ] && [ -z "${contexts[0]}" ]; then
    echo "✓ GitHub ${branch} branch now requires signoff"
  else
    for context in "${contexts[@]}"; do
      if [[ -z "$context" ]]; then
        echo "✓ GitHub ${branch} branch now requires signoff"
      else
        echo "✓ GitHub ${branch} branch now requires signoff on ${context}"
      fi
    done
  fi
}

cmd_uninstall() {
  local branch=""
  local contexts=()
  # All arguments except --branch are contexts
  
  # Process arguments with option handling
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --branch)
        if [[ -z "$2" || "$2" == -* ]]; then
          fail "option --branch requires an argument"
        fi
        branch="$2"
        shift 2
        ;;
      -*)
        fail "unknown option: $1"
        ;;
      *)
        # All positional arguments are contexts
        contexts+=("$1")
        shift
        ;;
    esac
  done

  if [[ -z "$branch" ]]; then
    branch=$(gh api repos/:owner/:repo --jq .default_branch) || fail "failed to get default branch"
  fi
  [[ -z "$branch" ]] && fail "branch name cannot be empty"
  
  # TODO: Implement context-specific uninstall that preserves other contexts
  # For now we just remove all branch protection which is the current behavior
  debug "removing protection from branch: ${branch}"

  gh api \
    --method DELETE \
    "repos/:owner/:repo/branches/${branch}/protection" >/dev/null || fail "failed to remove branch protection"

  # Default to standard signoff if no contexts specified
  if [ ${#contexts[@]} -eq 0 ]; then
    contexts=("")
  fi

  # Output success messages
  if [ ${#contexts[@]} -eq 1 ] && [ -z "${contexts[0]}" ]; then
    echo "✓ GitHub ${branch} branch no longer requires signoff"
  else
    for context in "${contexts[@]}"; do
      if [[ -z "$context" ]]; then
        echo "✓ GitHub ${branch} branch no longer requires signoff"
      else
        echo "✓ GitHub ${branch} branch no longer requires signoff on ${context}"
      fi
    done
  fi
}

cmd_check() {
  local branch=""
  local contexts=()
  # All arguments except --branch are contexts
  
  # Process arguments with option handling
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --branch)
        if [[ -z "$2" || "$2" == -* ]]; then
          fail "option --branch requires an argument"
        fi
        branch="$2"
        shift 2
        ;;
      -*)
        fail "unknown option: $1"
        ;;
      *)
        # All positional arguments are contexts
        contexts+=("$1")
        shift
        ;;
    esac
  done

  if [[ -z "$branch" ]]; then
    branch=$(gh api repos/:owner/:repo --jq .default_branch) ||
      fail "failed to get default branch"
  fi
  [[ -z "$branch" ]] && fail "branch name cannot be empty"

  # Default to standard signoff if no contexts specified
  if [ ${#contexts[@]} -eq 0 ]; then
    contexts=("")
  fi

  # Fetch branch protection once
  local protection
  protection=$(gh api "repos/:owner/:repo/branches/${branch}/protection" 2>/dev/null) || {
    for context in "${contexts[@]}"; do
      if [[ -z "$context" ]]; then
        echo "✗ GitHub ${branch} branch does not require signoff"
      else
        echo "✗ GitHub ${branch} branch does not require signoff on ${context}"
      fi
    done
    return 1
  }

  # Check each context
  for context in "${contexts[@]}"; do
    local context_name="signoff"
    if [[ -n "$context" ]]; then
      context_name="signoff/${context}"
    fi

    debug "checking protection for branch: ${branch} with context: ${context_name}"

    if echo "$protection" | jq -e ".required_status_checks.contexts | contains([\"${context_name}\"])" >/dev/null 2>&1; then
      if [[ -z "$context" ]]; then
        echo "✓ GitHub ${branch} branch requires signoff"
      else
        echo "✓ GitHub ${branch} branch requires signoff on ${context}"
      fi
    else
      if [[ -z "$context" ]]; then
        echo "✗ GitHub ${branch} branch does not require signoff"
      else
        echo "✗ GitHub ${branch} branch does not require signoff on ${context}"
      fi
    fi
  done
}

cmd_completion() {
  cat <<'EOF'
# bash completion for gh signoff

_gh_signoff() {
  local cur prev
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  case "$prev" in
    signoff)
      COMPREPLY=( $(compgen -W "create install uninstall check version -f --help tests lint security docs" -- "$cur") )
      return 0
      ;;
    install|uninstall|check)
      COMPREPLY=( $(compgen -W "--branch tests lint security docs performance" -- "$cur") )
      return 0
      ;;
    --branch)
      COMPREPLY=( $(compgen -W "main develop" -- "$cur") )
      return 0
      ;;
  esac

  # If we are halfway through typing an option
  if [[ $cur == --* ]]; then
    COMPREPLY=( $(compgen -W "--branch" -- "$cur") )
    return 0
  fi

  return 0
}

complete -F _gh_signoff gh-signoff
EOF
}

cmd_version() {
  echo "gh-signoff ${VERSION}"
}

cmd_help() {
  cat <<'EOF'
Sign off on commits without CI infrastructure.

USAGE
  gh signoff [flags] [command] [options]

COMMANDS
  create (default) Sign off on the current commit
  install          Install signoff requirement
  uninstall        Uninstall signoff requirement
  check            Check if signoff is required
  version          Show gh-signoff version
  completion       Output shell completion code

FLAGS
  -f  Force sign off (ignore uncommitted/unpushed changes)

OPTIONS
  --branch <branch>  Branch to operate on (for install, uninstall, check)

EXAMPLES
  gh signoff                           # Sign off on current commit
  gh signoff tests                     # Sign off that tests pass for current commit
  gh signoff tests lint security       # Sign off on multiple aspects at once
  gh signoff create -f                 # Force sign off
  gh signoff install                   # Require signoff on default branch
  gh signoff install --branch main     # Require signoff on main branch
  gh signoff install security          # Require security signoff on default branch
  gh signoff install tests lint        # Require multiple signoffs
  gh signoff check --branch main       # Check specific branch
  gh signoff check tests lint          # Check multiple signoff statuses

COMPLETION
  # Add to ~/.bashrc:
  eval "$(gh signoff completion)"
EOF
}

case "${1:-}" in
  "")               cmd_create "$@" ;;
  "create")         shift; cmd_create "$@" ;;
  "install")        shift; cmd_install "$@" ;;
  "uninstall")      shift; cmd_uninstall "$@" ;;
  "check")          shift; cmd_check "$@" ;;
  "version")        cmd_version ;;
  "completion")     cmd_completion ;;
  "-h" | "--help")  cmd_help ;;
  *)                cmd_help; exit 1 ;;
esac
